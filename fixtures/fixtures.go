package fixtures

import (
	"archive/zip"
	"bytes"
	"fmt"
	"net/http"

	"github.com/jbrunton/gflows/io/styles"

	"github.com/jbrunton/gflows/config"
	"github.com/jbrunton/gflows/io"
	statikFs "github.com/rakyll/statik/fs"
	"github.com/spf13/afero"
	"github.com/spf13/cobra"
)

type File struct {
	Path    string
	Content string
}

func (f *File) Write(fs *afero.Afero) {
	fs.WriteFile(f.Path, []byte(f.Content), 0644)
}

func NewFile(path string, content string) File {
	return File{Path: path, Content: content}
}

func CreateTestFileSystem(files []File, assetNamespace string) http.FileSystem {
	out := new(bytes.Buffer)
	writer := zip.NewWriter(out)
	for _, file := range files {
		f, err := writer.Create(file.Path)
		if err != nil {
			panic(err)
		}
		_, err = f.Write([]byte(file.Content))
		if err != nil {
			panic(err)
		}
	}
	err := writer.Close()
	if err != nil {
		panic(err)
	}
	asset := out.String()
	statikFs.RegisterWithNamespace(assetNamespace, asset)
	sourceFs, err := statikFs.NewWithNamespace(assetNamespace)
	if err != nil {
		panic(err)
	}
	return sourceFs
}

func NewTestContext(configString string) (*io.Container, *config.GFlowsContext, *bytes.Buffer) {
	fs := io.CreateMemFs()
	logger, out := io.NewTestLogger()
	container := io.NewContainer(fs, logger, styles.NewStyles(false), NewTestGitAdapter(fs))

	configPath := ".gflows/config.yml"
	if configString == "" {
		configString = "templates:\n  engine: ytt"
	}
	fs.WriteFile(configPath, []byte(configString), 0644)
	context, err := config.NewContext(fs, container.Logger(), config.ContextOpts{
		ConfigPath:   configPath,
		EnableColors: false,
	})
	if err != nil {
		panic(err)
	}

	return container, context, out
}

func NewTestCommand() *cobra.Command {
	cmd := &cobra.Command{}
	cmd.Flags().String("config", "", "")
	return cmd
}

const InvalidJsonnetTemplate = `
local workflow = {
  on: {
    push: {
      branches: [ "develop" ],
    },
  }
};
std.manifestYamlDoc(workflow, quote_keys=false)
`

const InvalidJsonnetWorkflow = `# File generated by gflows, do not modify
# Source: .gflows/workflows/test.jsonnet
"on":
  push:
    branches:
    - "develop"
`

const ExampleJsonnetTemplate = `
local workflow = {
  on: {
    push: {
      branches: [ "develop" ],
    },
  },
	jobs: {
		test: {
			"runs-on": "ubuntu-latest",
			steps: [
			  { run: "echo Hello, World!" }
      ]
    }
  }
};
std.manifestYamlDoc(workflow, quote_keys=false)
`

func ExampleWorkflow(sourceFileName string) string {
	return fmt.Sprintf(`# File generated by gflows, do not modify
# Source: .gflows/workflows/%s
jobs:
  test:
    runs-on: "ubuntu-latest"
    steps:
    - run: "echo Hello, World!"
"on":
  push:
    branches:
    - "develop"
`, sourceFileName)
}
